#ifndef OBJECT_DETECTOR_H
#define OBJECT_DETECTOR_H

#include "Common.h"
#include "Detection.h"
#include "SubBandImagePyramid.h"

// Class responsible for performing Non-Maxima Suppression on the response
// pyramid generated by SupportVectorMachine
class ObjectDetector
{
public:
    static ParametersMap getDefaultParameters();
    ParametersMap getParameters() const;

    ObjectDetector(const ParametersMap &params = getDefaultParameters());
    ObjectDetector(int winSizeNMS, double respThresh, double overlapThresh);


    // Performs NMS on a single image over a _winSizeNMS by _winSizeNMS window
    //
    // PARAMETERS
    // svmResp             response image generated by SupportVectorMachine class
    // roiSize             size of object at base of svmRespPyr (see SupportVectorMachine::getROISize())
    // featureScaleFactor  size of computed feature / size of input image (see Feature::scaleFactor())
    // imScale             scale of image relative to pyramid base
    //
    // OUTPUT
    // dets                vector of detections
    void operator()( const CFloatImage &svmResp, const Size &roiSize, double featureScaleFactor,
                     std::vector<Detection> &dets, double imScale = 1.0 ) const;

    // Perform NMS over all levels of the response pyramid svmRespPyr
    //
    // PARAMETERS
    // svmRespPyr          response pyramid generated by SupportVectorMachine class
    // roiSize             size of object at base of svmRespPyr (see SupportVectorMachine::getROISize())
    // featureScaleFactor  size of computed feature / size of input image (see Feature::scaleFactor())
    //
    // OUTPUT
    // dets                vector with final detections
    void operator()( const SBFloatPyramid &svmRespPyr, const Size &roiSize,
                     double featureScaleFactor, std::vector<Detection> &dets ) const;

private:
    int _winSizeNMS;

    // Threshold on the response, only considers maxima that
    // are greater or equal to _respThresh
    double _respThresh;

    // Threshold on the relative overlap between two detections. This
    // is used when performing NMS across different levels of the pyramid
    double _overlapThresh;
};

#endif // OBJECT_DETECTOR_H